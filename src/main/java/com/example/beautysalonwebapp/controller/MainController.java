package com.example.beautysalonwebapp.controller;

import com.example.beautysalonwebapp.entity.User;
import com.example.beautysalonwebapp.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Optional;

@RestController // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
//@SessionAttributes("phone")
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;




    @GetMapping(value = "/users")
    public List<User> allUsersDva() {
        return (List<User>) userRepository.findAll();
    }

    @PostMapping("/save")
    public User saveUsers(@RequestBody User users) {
        return userRepository.save(users);
    }

    @PostMapping(value = "/enter")
    public void entered(@RequestBody String phone, HttpServletResponse response) {
//        model.addAttribute("phone", userRepository.findById(id));
        List<User> users = userRepository.findByPhone(phone);
        Integer id_us = users.get(0).getId();

        Cookie cookie = new Cookie("id_user", id_us.toString());
        cookie.setMaxAge(60*60);
        cookie.setPath("/");
        response.addCookie(cookie);

//        return ResponseEntity.ok().body(HttpStatus.OK);
    }


//    @DeleteMapping("/delete/{user}")
//    public void delUsers(@PathVariable User user) {
//         userRepository.delete(user);
//    }

    @DeleteMapping("/delete/{id}")
    public void deleteUsers(@PathVariable Integer id) {
        userRepository.deleteById(id);
    }





//    @PostMapping(path="/add") // Map ONLY POST Requests
//    public @ResponseBody String addNewUser (@RequestParam String name
//            , @RequestParam String email) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setName(name);
//        n.setPhone(email);
//        userRepository.save(n);
//        return "Saved";
//    }

//    @GetMapping(path="/all")
//    public @ResponseBody Iterable<User> getAllUsers() {
//        // This returns a JSON or XML with the users
//        return userRepository.findAll();
//    }


//    @GetMapping(value = "/users")
//    public Map<String, Object> allUsersDva() {
//        Map<String, Object> map = new HashMap<>();
//        Iterable<User> users = userRepository.findAll();
//        for (var user : users)
//        {
//            map.put("Id", user.getId());
//            map.put("Name", user.getName());
//            map.put("Phone", user.getPhone());
//        }
//        return map;
//    }

}